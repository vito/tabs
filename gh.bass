(provide [image]
  (use (*dir*/nix))

  ; an image with the gh cli installed
  (def image
    {:file (nix:result (-> ($ nix build ".#gh")
                           (with-mount *dir*/img/ ./img/)
                           (with-mount *dir*/flake.nix ./flake.nix)
                           (with-mount *dir*/flake.lock ./flake.lock))
                       ./image.tar)
     :platform {:os "linux"}
     :tag "latest"}))

; returns a thunk with the gh cli auth'd with the given token
(defn with-auth [thunk token]
  (from image
    (if (null? token)
      ($ gh auth login) ; interactive
      (-> ($ sh -c "gh auth login --with-token < /token")
          (with-mount token /token)))
    thunk))

(provide [with-flags]
  ; returns thunk with the given kwopts passed as flags
  (defn with-flags [thunk & kwopts]
    (let [flags (opts->flags (list->scope kwopts))]
      (with-args thunk (append (thunk-args thunk) flags))))

  (defn opts->flags [opts]
    (reduce-kv append-flag [] opts))

  (defn append-flag [fs k v]
    (let [flag (str "--" k)]
      (if (boolean? v)
        ; for a bool, pass the flag with no val, iff the value is true
        (if v
          (conj fs flag)
          fs)

        ; for any other val, pass it along as-is.
        ;
        ; note that v may be a thunk path, so we don't want to stringify it or
        ; anything; let the runtime handle it.
        ;
        ; see (str-thunk) to concatenate to a thunk path.
        (conj fs flag v)))))

; returns a module for interacting with a repo's github releases
(defn release [repo token]
  (module [create! assets]
    ; creates a release
    ^:effects
    (defn create! [tag assets & kwopts]
      (-> ($ gh release create $tag & $assets)
          (with-auth token)
          (with-flags :repo repo & kwopts)
          read-word))

    ; a path root for release assets, listed under tags
    ^{:paths [[:tag :file]]}
    (def assets
      (curryfn [tag file]
        (-> ($ gh release download (path-name tag))
            (with-auth token)
            (with-flags :repo repo :pattern (path-name file))
            (subpath file))))

    ; TODO: this could be stdlib
    (defn read-word [thunk]
      (first (next (read thunk :unix-table))))))

(defn main gh-args
  (run (from image
         ($ gh & $gh-args))))
