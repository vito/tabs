(provide [auth]
  (use (*dir*/../gh))
  (import gh opts->flags)

  (defn auth [repo token]
    (def authed-image
      (from gh:cli
        (if (null? token)
          ($ gh auth login) ; interactive
          (-> ($ sh -c "gh auth login --with-token < /token")
              (with-mount token /token)))))

    (defn assets [tag]
      (fn [path]
        (-> ($ gh release download -R $repo (path-name tag) -p (path-name path))
            (with-image authed-image)
            (subpath path))))

    (defn create [tag target assets opts]
      (let [flags (-> {:repo repo
                       :target target
                       :title tag}
                      (merge opts)
                      opts->flags)
            args (append flags assets)]
        (-> ($ gh release create $tag & $args)
            (with-image authed-image))))

    (defn create! args
      (-> (apply create args)
          (read :unix-table)
          next
          first))

    {:create! create!
     :assets assets}))

(defn main []
  (let [bass (auth "vito/bass" null)]
    (run
      (from (linux/alpine)
        ($ tar -xzf bass:assets/v0.1.1/bass.linux-amd64.tgz -C /usr/local/bin/)
        ($ bass --version)))))
