(provide [*config* result image with-cache]
  (use (.time))

  (def *memos*
    *dir*/nix.lock)

  ; module configuration
  (def *config*
    (merge
      {; base image providing nix
       :nix-image (linux/nixos/nix)}
      (next *stdin* {})))

  ; attaches the persistent /nix/ cache mount to the thunk
  (defn with-cache [thunk]
    (with-mount thunk cache-mount /nix/))

  (def cache-mount
    (let [img *config*:nix-image]
      (cache-dir (str "nix-cache:" img:repository ":" img:tag "@" img:digest))))

  ; an image with flakes and nix-command enabled
  (def image
    (from *config*:nix-image
      ; seed the cache with the initial /nix/ content
      ;
      ; (this will itself be cached)
      (with-mount ($ cp -anT /nix/ /cache/) cache-mount /cache/)

      ; enable flakes
      (with-cache ($ sh -c "echo accept-flake-config = true >> /etc/nix/nix.conf"))
      (with-cache ($ sh -c "echo experimental-features = nix-command flakes >> /etc/nix/nix.conf"))))

  ; returns a thunk path to ./result after running the given 'nix build' thunk
  ;
  ; The thunk runs with the /nix/ cache and must create ./result in its working
  ; directory.
  (defn result [thunk path]
    (subpath
      (from image
        (with-cache thunk)

        ; hoist the result out of /nix/store so we can pass it around as a
        ; regular thunk path
        ;
        ; having to cp here is unfortunate, but oh well
        (with-cache ($ cp -aL ./result $path)))
      path)))
