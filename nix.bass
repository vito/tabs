(provide [*config*]
  (def *memos*
    *dir*/nix.lock)

  (def default-config
    {; image providing nix
     :nix-image (linux/nixos/nix)})

  ; module configuration
  (def *config*
    (merge default-config (next *stdin* {}))))

(provide [result image with-cache]
  ; attaches the persistent /nix/ cache mount to the thunk
  (defn with-cache [thunk]
    (with-mount thunk cache-mount /nix/))

  (def cache-mount
    (let [img *config*:nix-image]
      (cache-dir (str "nix-cache:" img:repository ":" img:tag "@" img:digest)
                 :locked)))

  ; an image with flakes and nix-command enabled
  (def image
    (from *config*:nix-image
      ; seed the cache with the initial /nix/ content
      ;
      ; (this will itself be cached)
      (with-mount ($ cp -anT /nix/ /cache/) cache-mount /cache/)

      ; enable flakes
      (with-cache ($ sh -c "echo accept-flake-config = true >> /etc/nix/nix.conf"))
      (with-cache ($ sh -c "echo experimental-features = nix-command flakes >> /etc/nix/nix.conf"))))

  ; returns a thunk path to ./result after running the given 'nix build' thunk
  ;
  ; The thunk runs with the /nix/ cache and must create ./result in its working
  ; directory.
  (defn result [thunk path]
    (subpath
      (from image
        (with-cache thunk)

        ; hoist the result out of /nix/store so we can pass it around as a
        ; regular thunk path
        ;
        ; having to cp here is unfortunate, but oh well
        (with-cache ($ cp -aL ./result $path)))
      path)))

(provide [linux]
  (use (.strings))

  (defn derivation [flake-ref name packages]
    (let [pkglist (str "with pkgs; [" (strings:join " " packages) "]")
          lines ["let"
            (str "  flake = builtins.getFlake " (json flake-ref) ";")
                 "  inputs = flake.inputs;"
                 "  pkgs = import inputs.nixpkgs {};"
                 "  fhs = (pkgs.callPackage <nixpkgs/pkgs/build-support/build-fhs-userenv/env.nix> {}) {"
                 "    name = \"container-fhs\";"
            (str "    targetPkgs = pkgs: " pkglist ";")
                 "    multiPkgs = null;  # Don't include glibc's multilib"
                 "  };"
                 "  stream = pkgs.dockerTools.streamLayeredImage {"
            (str "    name = " (json name) ";")
                 "    contents = pkgs.symlinkJoin {"
                 "      name = \"contents\";"
                 "      paths = [ fhs ];"
                 "    };"
                 "    config = {"
                 "      Env = ["
                 "        \"PATH=/bin\""
                 "        \"SSL_CERT_FILE=${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\""
                 "      ];"
                 "    };"
                 "  };"
                 "in"
                 "pkgs.runCommand \"write-docker-tar\" {} ''"
                 "  ${stream} > $out"
                 "''"]]
      (mkfile ./image.nix (strings:join "\n" lines))))

  (defn build-image [platform flake pkgs]
    (let [flake-ref (if (path? flake) "/flake" flake-ref)
          image-name (strings:join "/" (cons "nixpkgs" pkgs))
          image.nix (derivation flake-ref image-name pkgs)
          build-cmd (-> ($ nix build -f ./image.nix)
                        (with-mount image.nix ./image.nix))]
      ; return a thunk so folks can with-entrypoint directly
      (with-image scratch
        {:platform platform
         :file (result (if (path? flake)
                         (-> build-cmd (with-mount flake /flake/))
                         build-cmd)
                       ./image.tar)})))

  (def meta-pkgs
    {:shell ["bashInteractive" "coreutils" "moreutils" "nano"]})

  (defn package-resolver [platform pkgs]
    (fn args
      (case args
        []
        (error "must configure :flake, which is a flake path or reference string")

        [pkg-or-opt & _]
        (cond
          (path? pkg-or-opt)
          (let [name (path-name pkg-or-opt)
                sym (string->symbol name)
                new-pkgs (sym meta-pkgs [name])]
            (package-resolver platform (concat pkgs new-pkgs)))

          (symbol? pkg-or-opt)
          (let [{:flake flake} (list->scope args)]
            (build-image platform flake pkgs))

          :else
          (error "invalid package resolver argument" :arg pkg-or-opt))

        _
        (error "invalid image path segment" :segment optional))))

  ; a path root for building images on the fly
  ;
  ; Each path segment denotes a package.
  (def linux
    (package-resolver {:os "linux"} [])))
