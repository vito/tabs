(provide [*config* build]
  (use (.time))

  ; module configuration
  (def *config*
    (merge
      (next *stdin* {})
      {; base image providing nix
       :nix-image (linux/nixos/nix)
       ; how often to run nix channel --update
       :update-every time:day
       ; root directory for cache mount
       :cache-root /nix-cache/}))

  (def cache-mount
    (let [img *config*:nix-image
          img-path (string->dir img:digest)]
      (*config*:cache-root img-path)))

  (defn build-flake-thunk [thunk path]
    (from img
      ; seed the cache with the initial /nix/ content
      ;
      ; (this will itself be cached)
      (-> ($ cp -afT /nix/ /cache/)
          (with-mount cache-mount /cache/))

      ; enable flakes
      ($ sh -c "echo accept-flake-config = true >> /etc/nix/nix.conf")
      ($ sh -c "echo experimental-features = nix-command flakes >> /etc/nix/nix.conf")

      ; build with the cache mounted to /nix/ now
      (-> thunk
          (with-mount cache-mount /nix/))

      ; hoist the result out of /nix/store so we can pass it around as a
      ; regular thunk path
      ;
      ; having to cp here is unfortunate, but oh well
      (-> ($ cp -aL ./result $path)
          (with-mount cache-mount /nix/))))

  ; runs a 'nix build' command and returns ./result as a thunk path
  ;
  ; The provided thunk must set up its own mounts and should be pretty precise
  ; so that it doesn't have to rebuild (e.g. mount flake.lock/flake.nix in
  ; specifically rather than the entire repo root if it's not needed).
  (defn build-flake [thunk path]
    (subpath (build-flake-thunk thunk path) path))

  (defn build-thunk [context nix-file path]
    (from img
      ; seed the cache with the initial /nix/ content
      ;
      ; (this will itself be cached)
      (-> ($ cp -afT /nix/ /cache/)
          (with-mount cache-mount /cache/))

      ; daily updates
      (-> ($ nix-channel --update)
          (with-label :at (now *config*:update-every))
          (with-mount cache-mount /nix/))

      ; build with the cache mounted to /nix/ now
      (-> ($ nix-build (./ctx/ nix-file))
          (with-mount context ./ctx/)
          (with-mount cache-mount /nix/))

      ; hoist the result out of /nix/store so we can pass it around as a
      ; regular thunk path
      ;
      ; having to cp here is unfortunate, but oh well
      (-> ($ cp -aL ./result $path)
          (with-mount cache-mount /nix/))))

  ; builds nix-file and returns its ./result as a thunk path
  ;
  ; Runs nix-channel --update daily by default. An alternative interval may be
  ; specified as {:update-every} on stdin.
  ;
  ; The context is passed separately in case the nix-file needs to include
  ; other files within it. The nix-build command is invoked with context/path.
  (defn build [context nix-file path]
    (subpath (build-thunk context nix-file path) path)))
